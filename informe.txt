Pablo Hernández Martínez - pablo.hernandez.martinez@udc.es 
Iván Moure Pérez - i.moure@udc.es

-----Informe Práctica 1 Algoritmos-----

Esta práctica consiste en implementar dos algoritmos y evaluar su rendimiento en Python
(incluyendo medir sus tiempos de ejecución) para posteriormente averiguar su complejidad teórica.
Esto lo conseguiremos usando varias cotas para estimar la constante de cada algoritmo. 

-----Especificaciones de la máquina-----
Procesador: Intel® Core™ i7-1195G7 2.9GHz 
Memoria RAM: 16GB 
Sistema operativo: Windows 11 Home 64 bits 
Versión de Python: 3.10.5 64-bit 

-----Ejercicio 1-----
El ejercicio 1 se trataba de implementarlos a partir del pseudocódigo proporcionado. 

-----Ejercicio 2-----
El ejercicio 2 trataba de validar que ambos algoritmos funcionasen correctamente. Para ello creamos
un test, contenido en la función test(), que verifica que los dos proporcionen el mismo resultado
si se les pasa vectores generados de manera aleatoria. A continuación, adjuntamos un ejemplo de testeo. 

***Ejercicio 2***
Inicializacion aleatoria
[-5, -3, -3, 5, 3]

Ordenación por inserción
[-5, -3, -3, 3, 5]
///Éxito.

Inicializacion descendiente
[5, 3, -3, -3, -5]

Ordenación Shell
[-5, -3, -3, 3, 5]
///Éxito.


-----Ejercicio 3-----
El ejercicio 3 trataba de determinar los tiempos de ejecución para distintos tamaños del vector y para tres diferentes situaciones
iniciales: el vector está en orden ascendente,
           el vector está en orden descendente y
           el vector está desordenado (inicialización aleatoria).
La primera columna representa n, la segunda el tiempo en nanosegundos, la tercera la cota subestimada, la cuarta ajustada y la quinta sobreestimada.


+-------------------------------------------------------------------------------+
|            Ordenacion por inserción con inicialización ascendiente            |
+-------+-----------+-----------------+--------------------+--------------------+
|   n   | t(n) (ns) |      t(n)/n     |    t(n)/n**1.04    |    t(n)/n**1.08    |
+-------+-----------+-----------------+--------------------+--------------------+
|  128  |  29262.0* |    228.609375   | 188.28062771315408 | 155.06623371005375 |
|  256  |  84970.0* |   331.9140625   | 265.88635741714916 | 212.99355178890613 |
|  512  |  99031.0* |  193.419921875  | 150.70595212570106 | 117.42473984035726 |
|  1024 | 208060.0* |   203.18359375  | 153.98436954499675 | 116.69832995150536 |
|  2048 | 426381.0* | 208.19384765625 | 153.4668904145012  | 113.1257562057429  |
|  4096 |   836400  |   204.19921875  | 146.40627068364716 | 104.97002009462079 |
|  8192 |  1685500  | 205.74951171875 | 143.4839141622075  | 100.06164025045203 |
| 16384 |  3476000  |  212.158203125  | 143.90736823144854 | 97.61267924719432  |
+-------+-----------+-----------------+--------------------+--------------------+

+-------------------------------------------------------------------------------+
|                Ordenacion Shell con inicialización ascendiente                |
+-------+-----------+-----------------+--------------------+--------------------+
|   n   | t(n) (ns) |      t(n)/n     |  t(n)/(n)*log(n/2) |    t(n)/n**1.2     |
+-------+-----------+-----------------+--------------------+--------------------+
|  128  | 173128.0* |    1352.5625    | 325.2225352070631  | 512.5253471226802  |
|  256  | 348509.0* |  1361.36328125  | 280.57600781538605 |  449.08240476128   |
|  512  |   801300  |   1565.0390625  | 282.2342617832828  | 449.4394491499631  |
|  1024 |  1882800  |   1838.671875   | 294.7380884316124  | 459.66796875000017 |
|  2048 |  4248800  |   2074.609375   | 299.3028657094252  | 451.51309000641766 |
|  4096 |  9360100  | 2285.1806640625 | 299.71080105257425 | 432.96077374859567 |
|  8192 |  20648000 |   2520.5078125  | 303.0270101346366  | 415.72874971982924 |
| 16384 |  45116000 |  2753.662109375 | 305.5918976522427  | 395.39089190709115 |
+-------+-----------+-----------------+--------------------+--------------------+

+------------------------------------------------------------------------------------+
|              Ordenacion por inserción con inicialización descendiente              |
+-------+-------------+--------------------+--------------------+--------------------+
|   n   |  t(n) (ns)  |    t/((n**1.8))    |     t/((n**2))     |    t/((n**2.2))    |
+-------+-------------+--------------------+--------------------+--------------------+
|  128  |   1624200   | 261.61434920377616 |   99.13330078125   | 37.56449657174967  |
|  256  |   6203600   | 286.9537137452363  |  94.659423828125   | 31.225964642603756 |
|  512  |   25677500  | 341.08828871210056 | 97.95188903808594  | 28.129293451725324 |
|  1024 |  103101600  | 393.3013916015624  | 98.32534790039062  | 24.581336975097624 |
|  2048 |  422976300  | 463.36381913445683 | 100.84540843963623 | 21.947756780738228 |
|  4096 |  1694507300 | 533.0838649779361  | 101.00050568580627 |  19.136017461738   |
|  8192 |  6802183400 |  614.534739722134  | 101.36043131351471 | 16.71823636969188  |
| 16384 | 27424187000 | 711.5048599478076  | 102.16305777430534 | 14.669317050851424 |
+-------+-------------+--------------------+--------------------+--------------------+

+---------------------------------------------------------------------------------------+
|                    Ordenacion Shell con inicialización descendiente                   |
+-------+-----------+-----------------------+----------------------+--------------------+
|   n   | t(n) (ns) | t/((1/n)*(log(n)**2)) |  t/((n)*(log(n)**2)) | t/((n)*(log(2*n))) |
+-------+-----------+-----------------------+----------------------+--------------------+
|  128  | 226387.0* |   1230876.4199259863  |  75.12673461462319   | 318.95254123215796 |
|  256  | 513594.0* |   4275914.481722377   |  65.24527712589077   | 321.59701251316244 |
|  512  |   814000  |   10709234.413280806  |  40.85248723327944   | 229.3659693913313  |
|  1024 |  1873600  |   39932445.92959598   |  38.082548074336984  | 239.97100751150228 |
|  2048 |  4192300  |   147688273.31185925  |   35.2116282729767   | 246.1023120084148  |
|  4096 |  9356800  |   553954226.6730176   |  33.018244902671434  | 253.51203723313276 |
|  8192 |  21066900 |   2125460070.9306402  |  31.671823128024343  |  265.006907060056  |
| 16384 |  45747300 |    7959364853.3218    |  29.650944669998438  | 268.55225766625847 |
+-------+-----------+-----------------------+----------------------+--------------------+

+-----------------------------------------------------------------------------------+
|               Ordenacion por inserción con inicialización aleatoria               |
+-------+------------+--------------------+--------------------+--------------------+
|   n   | t(n) (ns)  |    t(n)/n**1.8     |     t(n)/n**2.0    |    t(n)/n**2.2     |
+-------+------------+--------------------+--------------------+--------------------+
|  128  | 277062.0*  | 44.62713632501948  |  16.9105224609375  | 6.407889760597284  |
|  256  |  1240200   | 57.36668962970566  |  18.9239501953125  | 6.2425754964467695 |
|  512  |  5156600   | 68.49794059284656  | 19.670867919921875 | 5.648973405244545  |
|  1024 |  19264800  | 73.48937988281249  | 18.372344970703125 | 4.593086242675775  |
|  2048 |  78260000  | 85.73258711058419  | 18.65863800048828  | 4.0608219554158795 |
|  4096 | 313033600  | 98.47886837428038  | 18.65825653076172  | 3.5350785657345405 |
|  8192 | 1284757100 | 116.06977107595534 | 19.144372642040253 | 3.157643893494531  |
| 16384 | 5118813000 | 132.80467809908154 | 19.069064408540726 |  2.7380753646779   |
+-------+------------+--------------------+--------------------+--------------------+

+---------------------------------------------------------------------------------+
|                  Ordenacion Shell con inicialización aleatoria                  |
+-------+-----------+-------------------+--------------------+--------------------+
|   n   | t(n) (ns) |       t(n)/n      |    t(n)/n**1.09    |    t(n)/n**1.18    |
+-------+-----------+-------------------+--------------------+--------------------+
|  128  | 115828.0* |     904.90625     | 584.7290768245289  | 377.83813879511405 |
|  256  | 276982.0* |    1081.9609375   | 656.8557177138842  | 398.7754261169179  |
|  512  | 828517.0* |   1618.197265625  | 922.9903628712483  | 526.4569580298754  |
|  1024 |   972200  |    949.4140625    | 508.77839857313654 | 272.64759295120064 |
|  2048 |  2311200  |    1128.515625    | 568.1825359597381  | 286.06727901498004 |
|  4096 |  5054900  |  1234.1064453125  | 583.7679197306167  | 276.1390521871222  |
|  8192 |  11394600 |  1390.9423828125  | 618.1644784436397  |  274.72548621089   |
| 16384 |  25706700 | 1569.012451171875 |  655.131671703163  | 273.5462723371124  |
+-------+-----------+-------------------+--------------------+--------------------+

-----Ejercicio 4-----
+----------------------------------------------------------------------+
|                        Tabla de complejidades                        |
+------------------------+----------------------+----------------------+
|      Nombre tabla      | Complejidad esperada | Complejidad empírica |
+------------------------+----------------------+----------------------+
| inserción-ascendiente  |         O(n)         |      O(n^1.04)       |
|   Shell-ascendiente    |         O(n)         |   O(n*(log(n/2)))    |
| inserción-descendiente |      O((n^2)/2)      |      O((n^2)/2)      |
|   Shell-descendiente   |   O(n*(log^2(n)))    |   O(n*(log^2(n)))    |
|  inserción-aleatoria   |        O(n^2)        |        O(n^2)        |
|    Shell-aleatoria     |        O(n^2)        |      O(n^1.09)       |
+------------------------+----------------------+----------------------+

-----Tiempos medidos en bucles-----
En el ejercicio 3 hay varias medidas de tiempo junto a las que aparece un asterisco. Como se enuncia al ejecutar el código, el asterisco
representa que estos tiempos se han medido de nuevo calculando su valor en medio en un bucle, ya que no cumplían con el umbral de confianza. 
Dicho bucle iteraba 100 veces. Todos los valores eran int, a no ser que pasasen por este bucle, tras lo cual se convertirían en float al pasar 
por la división. Esto nos permite etiquetarlos con un asterisco.

-----Mediciones anómalas-----
Hemos observado que algunas de las medidas de tiempo se desviaban ligeramente de las demás.
Por ejemplo, en la tabla del ejercicio 3, en el algoritmo de Shell e inicialización aleatoria, 
en n=512 el valor para la cota ajustada de t(n)/n**1.09 el resultado no sigue la tendencia del resto
de datos. También se puede observar en la ordenación por inserción con inicialización ascendiente para n=256.

También hemos automatizado la detección de tiempos negativos, pero aquí no hemos obtenido ninguno.

-----Conclusiones-----
En esta práctica hemos implementado dos algoritmos en Python a partir de pseudocódigo y
después comprobamos que funcionasen correctamente suministrándoles vectores aleatorios.
A continuación, programamos una manera de medir los tiempos de ejecución y por último fuimos
capaces de deducir su complejidad teórica a partir de varias cotas. 